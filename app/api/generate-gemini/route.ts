import type { NextRequest } from "next/server";

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { imageDataUrl, prompt, task } = body || {};

    if (!imageDataUrl || !prompt || !task) {
      return new Response(JSON.stringify({ message: "Missing fields" }), {
        status: 400,
      });
    }

    const apiKey = process.env.OPENROUTER_API_KEY;
    if (!apiKey) {
      return new Response(
        JSON.stringify({ message: "Gemini API key not configured" }),
        {
          status: 500,
        }
      );
    }

    const requestPayload = {
      model: "google/gemini-2.5-flash-image-preview:free",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "image_url",
              image_url: {
                url: imageDataUrl,
              },
            },
            {
              type: "text",
              text: `Task: ${task}. Instruction: ${prompt}. Generate a modified version of the provided image based on this instruction. Focus only on the visual modifications requested.`,
            },
          ],
        },
      ],
      modalities: ["image", "text"],
    };

    const response = await fetch(
      "https://openrouter.ai/api/v1/chat/completions",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${apiKey}`,
          "Content-Type": "application/json",
          "HTTP-Referer": "http://localhost:3000",
          "X-Title": "AI Studio",
        },
        body: JSON.stringify(requestPayload),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Gemini API error response:", errorText);

      // Handle rate limiting errors specifically
      if (response.status === 429) {
        return new Response(
          JSON.stringify({
            message:
              "Rate limit exceeded. Please wait a moment before trying again.",
            type: "rate_limit",
            details:
              process.env.NODE_ENV === "development" ? errorText : undefined,
          }),
          {
            status: 429,
          }
        );
      }

      return new Response(
        JSON.stringify({
          message: `Gemini API error: ${response.status} ${response.statusText}`,
          details:
            process.env.NODE_ENV === "development" ? errorText : undefined,
        }),
        {
          status: response.status,
        }
      );
    }

    const data = await response.json();

    let generatedImageDataUrl = null;

    if (data.choices?.[0]?.message?.images) {
      const firstImage = data.choices[0].message.images[0];
      if (firstImage?.image_url?.url) {
        generatedImageDataUrl = firstImage.image_url.url;
      }
    }

    if (!generatedImageDataUrl) {
      console.error("No image found in Gemini response:", data);
      return new Response(
        JSON.stringify({
          message: "No image generated by Gemini",
          debug: process.env.NODE_ENV === "development" ? data : undefined,
        }),
        {
          status: 500,
        }
      );
    }

    const result = {
      id: crypto.randomUUID(),
      imageUrl: generatedImageDataUrl,
      prompt: String(prompt),
      task: String(task),
      createdAt: new Date().toISOString(),
    };

    return new Response(JSON.stringify(result), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error: any) {
    console.error("Gemini API error:", error);

    if (
      error?.message?.includes("429") ||
      error?.message?.includes("quota") ||
      error?.message?.includes("rate limit")
    ) {
      return new Response(
        JSON.stringify({
          message:
            "Rate limit exceeded. Please wait a moment before trying again.",
          type: "rate_limit",
          details:
            process.env.NODE_ENV === "development" ? error?.message : undefined,
        }),
        {
          status: 429,
        }
      );
    }

    // Handle other API errors
    return new Response(
      JSON.stringify({
        message: error?.message || "Gemini API error",
        details:
          process.env.NODE_ENV === "development" ? error?.stack : undefined,
      }),
      {
        status: 500,
      }
    );
  }
}
